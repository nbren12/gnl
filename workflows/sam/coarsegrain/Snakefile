import xarray as xr
import os, re
import json
import glob

configfile: "config.yaml"

dataroot = config['dataroot']
stat_root = config['stat_root']
twod_root = config['twod_root']
output_dir = config["output_dir"]
run_ids = config['run_ids']



# This is a very large job.
rule all:
    input: expand(["{run}/coarse/3d/{field}.nc", "{run}/stat.nc", "{run}/coarse/2d/all.nc"], \
                  field='U V W TABS QRAD QV QN QP'.split(' '),\
                  run=run_ids),

rule all_2d:
    input: expand(["{run}/coarse/2d/all.nc"], run=run_ids)

rule statfile:
    input: stat_root + "/{run}.nc"
    output: "{run}/stat.nc"
    shell: "cp {input} {output}"

def _time_step_ncs(wildcards):
    fields = ['QV', 'QN', 'QP', 'U', 'V', 'W', 'QRAD', 'TABS', 'PP']
    files = expand(f"{dataroot}/{wildcards.run}_{wildcards.time}_" + "{field}.nc",
                  field=fields)
    return files

rule coarsen_one_time_step:
    input: _time_step_ncs
    output: "tmp/coarse/{run}/{time}.nc"
    params: blocks={'x': 40, 'y':40}
    script: "scripts/coarsen.py"


rule make_record_dim:
    input: "tmp/coarse/{f}.nc"
    output: "tmp/rec/{f}.nc"
    shell: "ncks --mk_rec_dmn time {input} {output}"


def get_time_steps(run):
    pattern = f"{dataroot}/{run}_*U.nc"
    files = glob.glob(pattern)
    pat = re.compile(f".*_(\d+)_U.nc")

    timesteps = [pat.search(file).group(1)
                 for file in files]

    return timesteps


def get_3d_files(wildcards):
    run = wildcards.run
    timesteps = get_time_steps(run)
    return [os.path.normpath(f"tmp/coarse/{run}/{time}.nc")
            for time in timesteps]


def get_2d_files(wildcards):
    run = wildcards.run
    pattern = f"{twod_root}/{run}_1280_*.nc"
    files = glob.glob(pattern)
    if len(files) == 0:
        raise ValueError("No files detected")
    return [os.path.normpath(f"tmp/rec/tmp/coarse/{x}") for x in files]


rule all_record_vars:
    input: get_3d_files
    threads: 4
    output: "{run}/coarse/3d/all.nc"
    script: "scripts/concat_many_files.py"

rule all_2d_vars:
    input: get_2d_files
    threads: 4
    output: "{run}/coarse/2d/all.nc"
    script: "scripts/concat_many_files.py"

rule destagger_w:
    input: "{run}/coarse/3d/W.nc"
    output: "{run}/coarse/3d/W.destaggered.nc"
    script: "scripts/destagger_w.py"

