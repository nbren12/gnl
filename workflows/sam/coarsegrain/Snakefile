import xarray as xr
import os
import json
import glob
import xnoah.sam.coarsen

dataroot = "/home/disk/eos17/guest/SAM6.10.6_NG"
stat_root = "/home/disk/eos13/guest/SAM6.10.6_NG/OUT_STAT"
twod_root = "/home/disk/eos13/guest/SAM6.10.6_NG/OUT_2D"

output_dir = config.get("output_dir")
run_ids = config['run_ids']



# This is a very large job.
rule all:
    input: expand(["{run}/coarse/3d/{field}.nc", "{run}/stat.nc"], \
                  field='U V W TABS QRAD QV QN QP'.split(' '),\
                  run=run_ids),

rule statfile:
    input: stat_root + "/{run}.nc"
    output: "{run}/stat.nc"
    shell: "cp {input} {output}"

def get_stagger_dim_mode(input):
    d = xr.open_dataset(input[0], cache=False)
    name = [d for d in d.data_vars if d != 'p'][0]
    dim = {'U':'x', 'V':'y'}.get(name, None)
    mode = {'x': 'wrap'}.get(dim, 'clip')
    return dim, mode


rule coarsen_one_file:
    input: "{f}.nc"
    output: temp("tmp/coarse{f}.nc")
    params: blocks={'x': 40, 'y':40}
    run:
        params = dict(params)
        params['stagger_dim']=get_stagger_dim_mode(input)
        xnoah.sam.coarsen.snakemake(input, output, params)


rule make_record_dim:
    input: "{f}.nc"
    output: "tmp/rec/{f}.nc"
    shell: "ncks --mk_rec_dmn time {input} {output}"


def get_3d_files(wildcards):
    run = wildcards.run
    pattern = f"{dataroot}/OUT_3D/{run}_*_{wildcards.field}.nc"
    files = glob.glob(pattern)
    if len(files) == 0:
        raise ValueError("No files detected")
    return [os.path.normpath(f"tmp/rec/tmp/coarse/{x}") for x in files]


rule all_record_vars:
    input: get_3d_files
    output: "{run}/coarse/3d/{field}.nc"
    script: "scripts/concat_many_files.py"

rule destagger_w:
    input: "{run}/coarse/3d/W.nc"
    output: "{run}/coarse/3d/W.destaggered.nc"
    script: "scripts/destagger_w.py"

